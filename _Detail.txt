
เริ่มต้นที่ program -> startup
Controllers -> จะจัดการเกี่ยวกับ endpoint
entity -> เก็บ abstraction ของข้อมูล





[Safe storage of passwords]
    (database เราอาจถูกบุกรุกได้โดย hacker)
    options 1: Storing in clear text
            - แย่มา เพราะโดนบุกทีได้หมดเลย
            - password จะผ่านสายหรือ internet แต่จริงๆของเราตอนนี้มันถูกป้องกันอยู่ เพราะเราใช้ SSL Security ในการ encrypt ซึ่งนั้นไม่มีปัญหาในส่วนของ user ใส่ clear text เป็น password มาหาเรา
    options 2: Hashing the password
            - นำ password ไปผ่าน hashing algorithm ซึ่งจะได้ password hash จากนั้นก็เก็บ password hash ลง db
            - ปัญหาก็คือ hacker สามารถเอา password hash ไป แปล แล้วก็จะได้ password เราไปเลย
            - อีกอย่างก็คือ users แต่ละคนยังสามารถเก็บ password hash เหมือนกันได้
    options 3: Hashing and salting the password
            - (salting)เป็น random string ที่ทำให้ password hash แตกต่างจากเดิม (ตอนแปลครั้งแรก) ซึ่งทำให้ Bob และ Tom มี password hash ที่แตกต่างกัน (ถ้าพวกเขาใส่ password ถูก ในตอนที่ login เราจะใช้ทั้ง password hash และ salt ในการคำนวณ)
            - และทำให้เมื่อ hacker เอาไปผ่านตัวแปลก็จะแปลไม่ได้
            
[Entity Framework]
    Entity Framework => An Object Relational Mapper (ORM) Translates our code into SQL commands that update our tables in the database
    [[/Applications/CODE/net_core/DatingApp/_noteImage/EntityFramework.png]]
    DbContext => 
        - class นี้ จะทำตัวเหมือนสะพานระหว่าง domain ของเราหรือ entity classes กับ database
        - DbContext class คือ primary class ที่เราจะใช้ในการสื่อสารกับ database ของเรา
        - ถ้าเราจะใช้ Entity Framework เราต้อง add class ที่มาจาก DbContext
    Sqlite =>
        - คือเราไม่จำเป็นต้อง install database server เพราะ sqlite ใช้ file ในการเก็บข้อมูล (เป็นเหมือน database)
        - ซึ่งเหมาะในการ development (ซึ่งเมื่อ production ค่อยใช้ database อีกอย่างนึง)เพราะมันเหมือนกับพกพาง่ายไม่ต้อง install อะไรและมันเพิ่มfileเข้าfolder project เป็นเหมือน database ได้ง่าย
        - SQL Server ไม่ Cross platform แต่ SQLite ทำงานได้ทุก OS 
    .NET3.5 เมื่อปี 2002 เราใช้ Aido .NET code เพื่อ save หรือ ดึงข้อมูลระหว่าง Application กับ database สิ่งที่เราต้องทำคือ
        -เปิด connectiuon กับ database
        -สร้าง data set เพื่อ Fetch หรือ submit data
        -จากนั้นก็เปลี่ยน data จาก data set ไปเป็น dot net objects
    ซึ่งยุ่งยาก และ เกิดข้อผิดพลาดได้ง่ายเนื่องจากเราต้องเขียน sql code ที่อยู่ในรูปของ string ซึ่งนั้นแหละทำให้ผิดพลาดได้ง่าย
    Microsoft จึงสร้าง Entity Framework เพื่อ ทำกิจกรรมเกี่ยวกับฐานข้อมูลเหล่านี้ ให้เราโดย อัตโนมัติ(Automate)

*สรุป Entity Framework Features
    1. Querying -> Query จาก db โดยใช้ link queries
    2. Change Tracking ->
    3. Saving -> DbContext class จะให้ save changes method กับเราซึ่งเราสามารถใช้งานได้ (insert, update, delete, command)
    4. Concurrency -> ทำให้สามารถทำงานหลายอย่างพร้อมกันได้โดยป้องกันการ overwriting ความ ปป. ที่ทำโดยอีก user
    5. Transaction -> ทำ automatic transaction ในระหว่างที่ค้นหาหรือบันทึกข้อมูล
    6. Caching -> คือเก็บข้อมูลใน caching นั้นคือเมื่อมีการ querying ซำ้ก็จะ return data จาก cash ไปเลยแทนที่จะไปเอาจากdb
    7. Built-in connections ->
    8. Configurations -> สร้าง configure entities หรือ override ใน connections ได้
    9. Migrations ->
        |    - นี้ทำให้เราสามารถสร้าง database schema ได้ เมื่อเรา run application มันจะสร้าง database ใน database server โดยอัตโนมัติทำให้เราไม่ต้องสร้าง database ด้วยตัวเอง เพราะ entity framework ทำให้เรา
        |    - นั้นคือเราเขียน database schema เมื่อ run มันจะสร้าง database ให้เรา