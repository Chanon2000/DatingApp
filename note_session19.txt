[Introduction]
    1. Prepare he app for publication
    2. What to consider before publishing
    3. Switching DBs
    4. Serving static content from the API server.
    5. Publishing to Heroku (Free!)
    6. Integrating Heroku to GitHub
    7. Using git branches

[What to consider when publishing]
    1. Environment variables
    2. Localhost
    3. CORS - if hosting the client app in different domain => ต้องคำนึงเมื่อคุณ host client กับ api คนละ domain
    4. Database => เนื่องจากเราใช้ entity framework นั้นทำให้สิ่งที่เราต้องคิดมีแค่เรื่องเดียวคือ entity framework support database server ที่เราจะใช้หรือป่าว
    เช่น คุณไม่ควรใช้ NoSql database (เช่น MongoDB) เพราะมันไม่ใช่ relational ซึ่ง entity framework คือ object relational mapper
    5. Cost
    6. Capacity / scalability
    7. Seed data
    8. Fake delays! => คนต้องลบมันด้วย

[Preparing the angular app and serving this from the API server]
- "ng build"
- เมื่อ build เสร็จลองแค่ "dotnet watch run" แล้วลองเข้า https://localhost:5001/ คุณก็จะเห็นหน้าเว็ปเลย โดยที่ไม่ได้ run "ng s" 
- ปัญหาตอนนี้ก็คือเมื่อยิง https://localhost:5001/members api มันจะไม่รู้จัก route นี้

[Creating an angular production build]
เราจะมาจัดการเรื่อง file size พวก vendor.js, styles.js (ดูได้ตรงส่วนของ network)

link การ deploy ของ angular
https://angular.io/guide/deployment#production-optimizations ที่ Production optimizations

- "ng build --prod" => "--prod" จะทำการ run ทุก optimizations ที่เราอ่านตาม link ซึ่งทำให้ file ต่างๆซึ่งอาจไม่ได้ชื่อเดิมเล็กลง
- เมื่อดูที่ console เราจะไม่เห็นอะไรใน development mode เลย 


[Switching the DB Server to PostGres]
list ของ database ที่ใช้งานได้ใน entity framework
https://docs.microsoft.com/en-us/ef/core/providers/?tabs=dotnet-core-cli

เดี๋ยวเราจะเปลี่ยนมาใช้ PostgreSQL เพราะ heroku ให้มา

และเราจะrun PostgreSQL บน docker โดยการ load image มาจาก docker hub
https://hub.docker.com/_/postgres

"docker run --name dev -e POSTGRES_USER=appuser -e POSTGRES_PASSWORD=Pa$$w0rd -p 5432:5432 -d postgres:latest"

ตัว GUI ของ PostgreSQL
https://www.pgadmin.org/

[Changing the DB Server in our app]
เราจะไม่ใช้ sqlite เราจะเปลี่ยนมาใช้ PostgreSQL

- เราจะลบทุกอย่างใน Migrations (history Migrations ต่างๆ)
- "dotnet ef database drop"
- install Npgsql.EntityFrameworkCore.PostgreSQL (copy มาจาก doc ของ ms) โดย NuGet
- แล้วทำการ dotnet ef migrations add PostgresInitial -o Data/Migrations นั้นคือ init Migrations
- "dotnet watch run"

[Setting up Heroku]
- https://dashboard.heroku.com/apps/datingappcoursemick/deploy/heroku-git => มี command ตัวอย่างอยู่ในนี้

(1) install heroku cli ลง localhost "brew tap heroku/brew && brew install heroku"

(2) ทำการ new app บน heroku => ชื่อ datingappcoursemick

(3) "heroku login"

(4) "heroku git:remote -a datingappcoursemick" => ทำการ add git remote ปัจจุบันของคุณ

(5)
จากนั้นใช้ .NET Core edge command
"heroku buildpacks:set https://github.com/jincod/dotnetcore-buildpack" => เพื่อทำการกำหนด build pack ให้กับ project
    - จริงๆ แล้ว Heroku ไม่ได้ support dotnet นัก จึงใช้ heroku dotnet buildpack

    - heroku dotnet buildpack
    https://elements.heroku.com/buildpacks/jincod/dotnetcore-buildpack

(6)
เพิ่ม Add-ons ชื่อ Heroku Postgres โดยใช้ Free version (Hobby Dev - Free) => มี limitations คือ data ต้องไม่เกิน 10,000 rows ใน database ซึ่งก็พอต่อการ development and testing

(7) กำหนด Config Vars ใน Settings ใส่ 
    - CloudinarySettings:CloudName => chanon
    - CloudinarySettings:ApiKey => 537949517993566
    - CloudinarySettings:ApiSecret => c70GtjUgLqu1Ou25suOd9DqN1Nw
    copy มาจาก appsetting

[Deploying the app to Heroku]

"heroku config:set ASPNETCORE_ENVIRONMENT=Production" => เพื่อเมื่อเรา run app บน Production มันจะได้ใช้ configuration แบบ Production ของเรา

"git push heroku master" => มันจะทำการ deploy app ของเราจาก master ของ remote ที่เรา set ไปก่อนหน้านี้
และใช้ build pack เพื่อ install dotnet ดึง sbk (คือ command ในการ deploy)
ซึ่งคุณจะได้ https://datingappcoursemick.herokuapp.com/

แล้วเข้าเว็ปคุณจะเห็นว่ามัน error เพราะคุณไม่ได้กำหนด TokenKey ดังนั้นจึง
"heroku config:set TokenKey=6XLXyPEuVHMaVuveCqfv7LtP7fIBdKDw" => โดย password นั้น custom มาจาก https://delinea.com/resources/password-generator-it-tool

จากนั้นก็ไปยิง url ของเว็ปเราอีกครั้ง คุณก็จะเห็นหน้าเว็ปเลย !!!!

*** commit แล้ว push ขึ้น origin ก่อนด้วย ก่อนจะ "git push heroku master" เมื่อจะทำการแก้ไขอะไร ***

[Using branches in git and connecting Heroku to GitHub]
    1. ที่ Deploy tab ให้ไปทำการ connect กับ github แล้วก็เลือก repo DatingApp
    2. จากนั้นเลือก branch
    3. เลือก Enable Automatic Deploys (ทำให้ทุกครั้งที่ push ไปที่ master มันจะ deploy version ใหม่ให้เลย)