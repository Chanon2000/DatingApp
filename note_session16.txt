[Introduction]
    1. Using .Net Identity ***
    2. Role management
    3. Policy based authorisation
    4. UserManager<T>
    5. SignInManager<T>
    6. RoleManager<T>

ASP.NET Identity เป็น topic ที่ใหญ่ เราไม่สามารถสอนได้หมดใน course นี้ได้
ซึ่งหลังจากนี้เราจะ refactor code ของเราให้ใช้ ASP.NET Identity แทน custom authentication ที่เราทำเอาไว้

[ทำไมเราต้องเปลี่ยนแปลง code มาใช้ ASP.NET Identity หรือ ASP.NET Core Identity]
    1. Battle hardened, written and tested by Microsoft
    2. Comes with a password hasher with 10,000 salt iterations => ซึ่งนี้ทำให้ password เราแข็งแกร่งขึ้น
    ตอนที่เราทำ password hashing and password salting เราทำแต่ 1 salt iterations
    3. Full framework for managing members and roles
    4. Provides an Entity Framework schema to create the needed tables
    5. Highly customisable

[Configuring the DbContext]

IdentityDbContext ไม่ได้มีมาพร้อม project ดังนั้นคุณต้อง install มันผ่าน nuget
- ไปที่ NuGet: Open NuGet Gallery
- หา microsoft.aspnetcore.identity
- เลือก Microsoft.AspNetCore.Identity.EntityFrameworkCore
- กดติ้ก API.csproj แล้ว กด install


[Refactoring and adding a new migration]

"dotnet ef migrations add IdentityAdded"
    ครั้งแรกจะขึ้นแจ้งเตือนก่อนว่า (An operation was scaffolded that may result in the loss of data. Please review the migration for accuracy.)
    ประมาณว่ามันอาจจะทำให้ครูเสียข้อมูลบางอย่าง เพราะมันลบบาง column ลแ้วข้อมูลส่วนนั้นก็จะหายไป หลักๆเลยคือเราลบ password salt

"dotnet run" -> เพื่อทำการ restart และสร้าง migration

การทำแบบนี้จะทำได้ถ้าคุณเป็น .net5 เพราะมันใช้ operation บางอันได้ แต่ถ้าตำ่กว่านี้ทำไม่ได้ วิธีแก้ปัญหาคือคุณต้อง delete folder migration ทิ้งไปเลย แล้วทำการสร้าง migration ขึ้นมาใหม่


[Updating the seed method]

เมื่อเขียน code ในการดึงข้อมูลจาก seed เมื่อ start app ใหม่ ให้ ...
    - stop application
    - dotnet ef database drop
    - dotnet watch run -> ทำให้เมื่อไม่มีข้อมูล user มันจะทำการดึงข้อมูลจาก UserSeedData.json

เมื่อเปิดดูข้อมูล user ใน database คุณจะเห็น passwordHash ซึ่งถูกสร้างจากการ salted ถึง 10,000 times

[Adding roles to the app]

เมื่อเขียน code เพิ่ม role เสร็จก็...
- dotnet ef database drop
- dotnet watch run

ก็จะเห็นข้อมูลใน AspNetRoles และข้อมูลใน AspNetUserRoles เพิ่มเข้ามาด้วย


[Adding an admin component]
"ng g c admin-panel --skip-tests"


[Adding an admin guard]
"ng g guard admin --skip-tests"
แล้วเลือก CanActivate แค่นั้น


[Adding a custom directive]
"ng g d has-role --skip-tests"


[Adding the edit roles component]
    "ng g c user-management --skip-tests"

    "ng g c photo-management --skip-tests"

    "ng g s admin --skip-tests"

[แก้ไข bootstarp คนละ version กับ ผู้สอน]
    "npm uninstall bootswatch"
    "npm install bootswatch@4.5.2"